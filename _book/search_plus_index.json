{"./":{"url":"./","title":"前言","keywords":"","body":"前言 随着鸿蒙生态的快速发展，Taro 作为一个多端统一开发框架，已经支持编译到鸿蒙平台。为了帮助开发者更好地掌握 Taro For Harmony 的开发技能，我们集合坚果派的力量，利用业余时间编写了这本《Taro For Harmony 开发指南》，希望能为鸿蒙生态的发展贡献一份力量。 本书组织结构 本书以循序渐进的方式，从 Taro 基础知识入手，到鸿蒙平台的实际应用，内容组织如下： 第一篇：基础篇，介绍 Taro 框架的基本概念、安装配置、多平台运行等基础知识，帮助读者快速上手。 第二篇：鸿蒙篇，重点讲解 Taro 在鸿蒙平台的开发环境搭建、编译配置、组件适配等核心内容。 第三篇：进阶篇，深入探讨 Taro 的高级特性、性能优化、调试技巧等进阶内容。 第四篇：实战篇，通过实际项目案例，展示 Taro For Harmony 的完整开发流程和最佳实践。 第五篇：生态篇，介绍鸿蒙生态相关的技术栈、工具链和发展趋势。 本书读者对象 具备 JavaScript/TypeScript 基础，了解 React 或 Vue 等前端框架的开发者 有移动端开发经验，希望学习多端统一开发的开发者 对鸿蒙生态感兴趣，想要掌握 Taro For Harmony 开发的技术人员 本书适合有一定编程基础的读者，不适合完全零基础的初学者 版本说明与勘误 本书基于 Taro 最新版本编写，涵盖鸿蒙 NEXT 版本的相关内容。由于 Taro 和鸿蒙生态都在快速发展中，部分内容可能会随版本更新而变化，请读者以官方最新文档为准。 如果您在阅读过程中发现任何错误或有改进建议，欢迎通过以下方式反馈： 在项目仓库提交 Issue 加入技术交流群：695438501 我们会及时处理您的反馈，不断完善本书内容。 致谢 本书的编写过程中，我们主要参考了 Taro 官方文档、鸿蒙开发者文档以及相关开源项目。感谢 Taro 团队和鸿蒙生态的开发者们提供的优秀技术方案和详细文档。 特别感谢： Taro 开发团队提供的多端统一开发框架 鸿蒙生态的技术专家们的耐心解答 坚果派社区成员的积极参与和反馈 所有为鸿蒙生态建设贡献力量的开发者们 让我们一起推动鸿蒙生态的繁荣发展！ powered by Gitbook该文件修订时间： 2025-06-29 08:51:31 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"为什么要写博客.html":{"url":"为什么要写博客.html","title":"为什么选择 Taro For Harmony？","keywords":"","body":"为什么选择 Taro For Harmony？ 多端统一开发的需求 在移动互联网快速发展的今天，开发者面临着多平台适配的挑战。传统的开发模式需要为不同平台编写不同的代码，这不仅增加了开发成本，也提高了维护难度。随着鸿蒙生态的崛起，开发者又多了一个需要适配的平台。 Taro 的优势 1. 一套代码，多端运行 Taro 最大的优势在于能够用一套代码同时适配多个平台： 微信小程序 支付宝小程序 百度小程序 字节跳动小程序 QQ 小程序 H5 React Native 鸿蒙 HarmonyOS 2. 基于 React 语法 Taro 采用 React 语法，对于熟悉 React 的开发者来说学习成本极低。同时支持： JSX 语法 React Hooks 组件化开发 TypeScript 支持 3. 完善的生态系统 丰富的组件库 活跃的社区支持 完善的开发工具链 详细的官方文档 鸿蒙生态的机遇 1. 政策支持 随着国产化进程的推进，鸿蒙系统得到了政策层面的大力支持，未来在政企市场将有广阔的应用前景。 2. 技术创新 鸿蒙系统在分布式架构、万物互联等方面具有技术优势，为开发者提供了新的技术探索空间。 3. 市场机会 作为新兴生态，鸿蒙平台为开发者提供了抢占先机的机会，早期进入者将获得更多的流量红利。 Taro For Harmony 的价值 1. 降低开发成本 通过 Taro，开发者可以用一套代码同时覆盖传统平台和鸿蒙平台，大大降低了开发和维护成本。 2. 加速产品上线 无需重新开发，现有的 Taro 项目可以快速适配到鸿蒙平台，加速产品在新平台的上线速度。 3. 技能复用 开发者无需学习全新的技术栈，可以充分利用现有的 React/Taro 开发经验。 学习本书的收益 通过学习本书，您将获得： 全面掌握 Taro For Harmony 的开发技能 深入理解 鸿蒙平台的特性和开发要点 实战经验 通过项目案例获得实际开发经验 前瞻视野 了解多端开发的最新趋势和最佳实践 让我们一起踏上 Taro For Harmony 的学习之旅，抓住鸿蒙生态发展的历史机遇！ powered by Gitbook该文件修订时间： 2025-06-29 08:53:09 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"chapter1/1.Taro介绍.html":{"url":"chapter1/1.Taro介绍.html","title":"3.1 Taro 框架介绍","keywords":"","body":"鸿蒙版Taro渐进式入门教程 Taro 介绍 Taro 是由京东发起并维护的开放式跨端跨框架解决方案，支持以 Web 的开发范式来实现小程序、H5、原生 APP 的跨端统一开发，从 18 年开源至今，在 GitHub 已累计获得 36,000+ Stars。 环境准备 目前 Taro 仅提供一种开发方式：安装 Taro 命令行工具（Taro CLI）进行开发。 Taro CLI 依赖于 Node.js 环境，所以在你的机器上必须安装 Node.js 环境。安装 Node.js 环境有很多种方法，如果你完全不了解 Node.js 可以访问 Node.js 官网 下载一个可执行程序进行安装。请确保已具备较新的 node 环境（>=16.20.0）。 当你的机器已经存在了 Node.js 环境，可以通过在终端输入命令 npm i -g @tarojs/cli 安装 Taro CLI。安装完毕之后，在终端输入命令 taro，如果出现类似内容就说明安装成功了： jianguo@nutpi fvmdemo % taro --version 👽 Taro v4.1.1 4.1.1 编辑器 推荐使用 VSCode 当你使用 VSCode 时，推荐安装 ESLint 插件，如果你使用 TypeScript，别忘了配置 eslint.probe 参数。如果使用 Vue，推荐安装 Vetur 插件。安装了上述插件之后使用 Taro 都实现自动补全和代码实时检查（linting）的功能。 终端 macOS/Linux 在 *nix 系统中终端模拟器使用什么工具（Terminal/iTerm2/Konsole/Hyper/etc..）并不重要，但运行 Taro CLI 的 shell 我们推荐使用 bash 或 zsh。 Windows 在 Windows 中我们推荐使用内置的 cmd 或 PowerShell。如果有条件推荐安装 WSL 并使用 Linux 分发版的终端运行 Taro CLI。由于 Taro 的开发团队和 CI 都只运行或测试 *nix 系统，部分 Windows 极端情况或许没能考虑到，导致出现 Bug。 基础教程 安装好 Taro CLI 之后可以通过 taro init 命令创建一个全新的项目，你可以根据你的项目需求填写各个选项，一个最小版本的 Taro 项目会包括以下文件： ├── babel.config.js # Babel 配置 ├── .eslintrc.js # ESLint 配置 ├── config # 编译配置目录 │ ├── dev.js # 开发模式配置 │ ├── index.js # 默认配置 │ └── prod.js # 生产模式配置 ├── package.json # Node.js manifest ├── dist # 打包目录 ├── project.config.json # 小程序项目配置 ├── src # 源码目录 │ ├── app.config.js # 全局配置 │ ├── app.css # 全局 CSS │ ├── app.js # 入口组件 │ ├── index.html # H5 入口 HTML │ └── pages # 页面组件 │ └── index │ ├── index.config.js # 页面配置 │ ├── index.css # 页面 CSS │ └── index.jsx # 页面组件，如果是 Vue 项目，此文件为 index.vue 我们以后将会讲解每一个文件的作用，但现在，我们先把注意力聚焦在 src 文件夹，也就是源码目录： 入口组件 每一个 Taro 项目都有一个入口组件和一个入口配置，我们可以在入口组件中设置全局状态/全局生命周期，一个最小化的入口组件会是这样： src/app.js import React, { Component } from 'react' import './app.css' class App extends Component { render() { // this.props.children 是将要会渲染的页面 return this.props.children } } // 每一个入口组件都必须导出一个 React 组件 export default App 每一个入口组件（例如 app.js）总是伴随一个全局配置文件（例如 app.config.js），我们可以在全局配置文件中设置页面组件的路径、全局窗口、路由等信息，一个最简单的全局配置如下： src/app.config.js export default { pages: ['pages/index/index'], } 注意我们必须保证配置文件是在 Node.js 环境中是可以执行的，不能使用一些在 H5 环境或小程序环境才能运行的包或者代码，否则编译将会失败 页面组件 页面组件是每一项路由将会渲染的页面，Taro 的页面默认放在 src/pages 中，每一个 Taro 项目至少有一个页面组件。在我们生成的项目中有一个页面组件：src/pages/index/index，细心的朋友可以发现，这个路径恰巧对应的就是我们全局配置的 pages 字段当中的值。一个简单的页面组件如下 src/pages/index/index.jsx import { View } from '@tarojs/components' class Index extends Component { state = { msg: 'Hello World!', } onReady() { console.log('onReady') } render() { return {this.state.msg} } } export default Index onReady 生命周期函数。这是来源于微信小程序规范的生命周期，表示组件首次渲染完毕，准备好与视图交互。Taro 在运行时将大部分小程序规范页面生命周期注入到了页面组件中，同时 React 或 Vue 自带的生命周期也是完全可以正常使用的。 View 组件。这是来源于 @tarojs/components 的跨平台组件。相对于我们熟悉的 div、span 元素而言，在 Taro 中我们要全部使用这样的跨平台组件进行开发。 和入口组件一样，每一个页面组件（例如 index.vue）也会有一个页面配置（例如 index.config.js），我们可以在页面配置文件中设置页面的导航栏、背景颜色等参数，一个最简单的页面配置如下： src/pages/index/index.config.js export default { navigationBarTitleText: '首页', } Taro 的页面钩子函数和页面配置规范是基于微信小程序而制定的，并对全平台进行统一。 你可以通过访问 React 页面组件 了解全部页面钩子函数和页面配置规范。 自定义组件 如果你看到这里，那不得不恭喜你，你已经理解了 Taro 中最复杂的概念：入口组件和页面组件，并了解了它们是如何（通过配置文件）交互的。接下来的内容， 我们先把首页写好，首页的逻辑很简单：把论坛最新的帖子展示出来。 src/pages/index/index.jsx import Taro from '@tarojs/taro' import React from 'react' import { View } from '@tarojs/components' import { ThreadList } from '../../components/thread_list' import api from '../../utils/api' import './index.css' class Index extends React.Component { config = { navigationBarTitleText: '首页', } state = { loading: true, threads: [], } async componentDidMount() { try { const res = await Taro.request({ url: api.getLatestTopic(), }) this.setState({ threads: res.data, loading: false, }) } catch (error) { Taro.showToast({ title: '载入远程数据错误', }) } } render() { const { loading, threads } = this.state return ( ) } } export default Index 可能你会注意到在一个 Taro 应用中发送请求是 Taro.request() 完成的。 和页面配置、全局配置一样，Taro 的 API 规范也是基于微信小程序而制定的，并对全平台进行统一。 你可以通过在 API 文档 找到所有 API。 在我们的首页组件里，还引用了一个 ThreadList 组件，我们现在来实现它： src/components/thread_list.jsx import React from 'react' import { View, Text } from '@tarojs/components' import { Thread } from './thread' import { Loading } from './loading' import './thread.css' class ThreadList extends React.Component { static defaultProps = { threads: [], loading: true, } render() { const { loading, threads } = this.props if (loading) { return } const element = threads.map((thread, index) => { return ( ) }) return {element} } } export { ThreadList } 参考 https://docs.taro.zone/docs/guide#%E5%A4%9A%E7%AB%AF%E5%BC%80%E5%8F%91 powered by Gitbook该文件修订时间： 2025-05-24 10:46:58 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"chapter1/2.安装Taro.html":{"url":"chapter1/2.安装Taro.html","title":"3.2 安装与配置 Taro","keywords":"","body":"鸿蒙 版Taro 实战：搭建开发环境 一、配置鸿蒙环境 下载安装 DevEco 建议使用最新版本的 IDE，当前为 5.0.5Release 版本。 二、创建鸿蒙项目 打开 DevEco，点击右上角的 Create Project，在 Application 处选择 Empty Ability，点击 Next，进入配置页面，根据需求调整内容，这里使用默认配置： Project name：tarooh Bundle name：com.nutpi.taro Save location：选择需要创建的目录，例如 ~/test/tarooh Module name：entry 注意，当前 Taro 支持的 SDK 版本为 4.1.1。 点击 Finish 完成项目创建。 三、安装 Taro 4.1 npm install -g @tarojs/cli 安装成功后，检查 taro 是否生效： taro --version 预期输出： 👽 Taro v4.1.1 4.1.1 初始化项目 taro init taro-ohos 按照提示输入以下配置： 注意：当前仅支持使用 Vite 编译鸿蒙应用，所以在配置时请注意选择。 ? 请输入项目介绍 taro ohos ? 请选择框架 React ? 是否需要使用 TypeScript？Yes ? 请选择 CSS 预处理器（Sass/Less/Stylus）Sass ? 请选择包管理工具 yarn ? 请选择编译工具 Vite ? 请选择模板源 Gitee（最快） ✔ 拉取远程模板仓库成功！ ? 请选择模板 默认模板 等待项目创建成功，直到输出以下提示： Done in 44.95s. ✔ 安装项目依赖成功 创建项目 taro-ohos 成功！ 请进入项目目录 taro-ohos 开始工作吧！😝 四、安装鸿蒙插件 cd taro-ohos 然后使用 npm 安装： npm i @tarojs/plugin-platform-harmony-cpp 或者使用 pnpm 安装： pnpm i @tarojs/plugin-platform-harmony-cpp 五、修改编译配置 找到 config/index.ts 文件，在 plugin 处添加 @tarojs/plugin-platform-harmony-cpp，并在 rn 下方添加 harmony 配置： import os from 'os' import path from 'path' const config = { // ... plugins: [ ['@tarojs/plugin-platform-harmony-cpp', { }] ], harmony: { // compiler: 'vite', projectPath: path.join(os.homedir(), '/Desktop/test/tarooh'), hapName: 'entry', }, // ... } 注意：将 projectPath 设置为 DevEco 创建的鸿蒙项目目录。 六、编译鸿蒙应用 # 编译鸿蒙应用 taro build --type harmony_cpp # 编译鸿蒙原生组件 taro build native-components --type harmony_cpp 如果需要同时编译鸿蒙应用和原生组件，可以在页面配置中添加 entryOption: false 表示该页面是组件，并通过 componentName 指定组件导出名： export default { navigationBarTitleText: 'Hello World', + componentName: 'MyComponent', + entryOption: false, } Taro 会将编译好的文件输出至鸿蒙项目目录。 七、运行鸿蒙应用 1.配置应用签名 打开 File -> Project Structure...，点击 Signing Configs，点击 Sign In，登录华为账号，点击右下角 Apply，然后点击 OK，完成签名配置。 { \"name\": \"entry\", \"version\": \"1.0.0\", \"description\": \"Please describe the basic information.\", \"main\": \"\", \"author\": \"\", \"license\": \"\", \"dependencies\": { \"@taro-oh/library\": \"file:../static/@taro-oh/library-4.1.1.har\" }, \"devDependencies\": {} } 2.运行应用 在 DevEco 中，点击运行按钮。 八、常见问题解答（FAQ） 1.不存在编译平台 ${platform} 若运行 Taro 时出现 throw new Error('不存在编译平台 ${platform}') 错误，可能是因为 config/index.ts 文件中未添加 @tarojs/plugin-platform-harmony-cpp 插件。 2.EPERM: operation not permitted 遇到权限问题时，可执行以下命令： mkdir -p ~/.npm-global/lib/node_modules npm config set prefix '~/.npm-global' npm install -g @tarojs/cli 九、参考资料 鸿蒙 & OpenHarmony | Taro 文档 Taro 项目仓库 Taro 官方文档 Taro UI 项目仓库 Taro UI 官方文档 plugin-platform-harmony-cpp taro-oh 十、Taro 仓库概览 以下是 Taro 的主要 NPM 包及其功能： 路径 描述 @tarojs/cli CLI 工具 @tarojs/service 插件化内核 @tarojs/taro-loader Webpack loaders @tarojs/helper 工具库，主要供 CLI、编译时使用 @tarojs/runner-utils 工具库，主要供小程序、H5 的编译工具使用 @tarojs/shared 工具库，主要供运行时使用 @tarojs/taro 暴露各端所需要的 Taro 对象 @tarojs/api 和各端相关的 Taro API babel-preset-taro Babel preset eslint-config-taro ESLint 规则 postcss-pxtransform PostCSS 插件，转换 px 为各端的自适应尺寸单位 postcss-html-transform PostCSS 插件，用于 HTML、小程序标签的类名相互转换 坚果派社区 坚果派社区由坚果、小波、狼哥等人创建，团队成员包括数位华为 HDE 及 1000+ HarmonyOS 开发者，以及三十余位万粉博主/UP 主，专注于分享 HarmonyOS/OpenHarmony、仓颉、ArkUI-X、元服务、AI、BlueOS 操作系统等技术。团队成员主要分布在北京、上海、南京、深圳、广州、苏州、长沙、宁夏等地，已为华为、vivo、腾讯、亚马逊等提供开发咨询服务 100+ 次，累计粉丝 100w+，孵化开发者 10w+，覆盖高校 20+、企业 10+。自研应用 40 款，三方库 80 个，鸿蒙原生应用课程 500+，持续助力鸿蒙仓颉等生态繁荣发展。欢迎大家加入。 powered by Gitbook该文件修订时间： 2025-05-25 14:07:54 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"chapter1/3.Taro运行多平台.html":{"url":"chapter1/3.Taro运行多平台.html","title":"3.3 Taro 多平台运行","keywords":"","body":"H5 编译命令 # yarn $ yarn dev:h5 $ yarn build:h5 # npm script $ npm run dev:h5 $ npm run build:h5 # 仅限全局安装 $ taro build --type h5 --watch $ taro build --type h5 # npx 用户也可以使用 $ npx taro build --type h5 --watch $ npx taro build --type h5 微信小程序 编译命令 # yarn $ yarn dev:weapp $ yarn build:weapp # npm script $ npm run dev:weapp $ npm run build:weapp # 仅限全局安装 $ taro build --type weapp --watch $ taro build --type weapp # npx 用户也可以使用 $ npx taro build --type weapp --watch $ npx taro build --type weapp # watch 同时开启压缩 $ set NODE_ENV=production && taro build --type weapp --watch # CMD $ NODE_ENV=production taro build --type weapp --watch # Bash 环境及依赖检测 Taro 提供了命令来一键检测 Taro 环境及依赖的版本等信息，方便大家查看项目的环境及依赖，排查环境问题。在提 issue 的时候，请附上 taro info 打印的信息，帮助开发人员快速定位问题。 ianguo@localhost taro-ohos % taro info 👽 Taro v4.1.0 Taro CLI 4.1.0 environment info: System: OS: macOS 13.4.1 Shell: 5.9 - /bin/zsh Binaries: Node: 18.20.1 - /Applications/DevEco-Studio.app/Contents/tools/node/bin/node Yarn: 1.22.22 - /usr/local/bin/yarn npm: 10.5.0 - /Applications/DevEco-Studio.app/Contents/tools/node/bin/npm npmPackages: @tarojs/cli: 4.1.0 => 4.1.0 @tarojs/components: 4.1.0 => 4.1.0 @tarojs/helper: 4.1.0 => 4.1.0 @tarojs/plugin-framework-react: 4.1.0 => 4.1.0 @tarojs/plugin-platform-alipay: 4.1.0 => 4.1.0 @tarojs/plugin-platform-h5: 4.1.0 => 4.1.0 @tarojs/plugin-platform-harmony-hybrid: 4.1.0 => 4.1.0 @tarojs/plugin-platform-jd: 4.1.0 => 4.1.0 @tarojs/plugin-platform-qq: 4.1.0 => 4.1.0 @tarojs/plugin-platform-swan: 4.1.0 => 4.1.0 @tarojs/plugin-platform-tt: 4.1.0 => 4.1.0 @tarojs/plugin-platform-weapp: 4.1.0 => 4.1.0 @tarojs/react: 4.1.0 => 4.1.0 @tarojs/runtime: 4.1.0 => 4.1.0 @tarojs/shared: 4.1.0 => 4.1.0 @tarojs/taro: 4.1.0 => 4.1.0 @tarojs/vite-runner: 4.1.0 => 4.1.0 babel-preset-taro: 4.1.0 => 4.1.0 eslint-config-taro: 4.1.0 => 4.1.0 react: ^18.0.0 => 18.3.1 npmGlobalPackages: typescript: 5.2.2 jianguo@localhost taro-ohos % Taro Doctor Taro Doctor 就像一个医生一样，可以诊断项目的依赖、设置、结构，以及代码的规范是否存在问题，并尝试给出解决方案。 但和真正的医生不一样，Taro Doctor 不需要排队挂号，也不用花钱。你只需要在终端运行命令：taro doctor，就像图里一样： ianguo@localhost taro-ohos % taro doctor 👽 Taro v4.1.0 🎯 验证环境信息！ [✓] 安装的 Node 版本为 v18.20.1 🎯 验证项目配置 (/config/index.js) ！ [✓] 成功获取远程配置验证文件：https://raw.githubusercontent.com/NervJS/taro-doctor/main/assets/config_schema.json [✓] 项目配置正确！ 🎯 验证项目依赖安装正确性！ [!] 本地已经安装了 Taro CLI 版本为 4.1.0，建议使用 npm script 来执行项目的预览和打包 本地安装的 Taro 相关依赖版本信息如下： - @tarojs/components: 4.1.0 - @tarojs/helper: 4.1.0 - @tarojs/plugin-framework-react: 4.1.0 - @tarojs/plugin-platform-alipay: 4.1.0 - @tarojs/plugin-platform-h5: 4.1.0 - @tarojs/plugin-platform-harmony-hybrid: 4.1.0 - @tarojs/plugin-platform-jd: 4.1.0 - @tarojs/plugin-platform-qq: 4.1.0 - @tarojs/plugin-platform-swan: 4.1.0 - @tarojs/plugin-platform-tt: 4.1.0 - @tarojs/plugin-platform-weapp: 4.1.0 - @tarojs/react: 4.1.0 - @tarojs/runtime: 4.1.0 - @tarojs/shared: 4.1.0 - @tarojs/taro: 4.1.0 - @tarojs/cli: 4.1.0 - @tarojs/vite-runner: 4.1.0 🎯 验证最佳实践！ [!] 没有检查到常见的测试依赖(jest/mocha/ava/tape/jesmine/karma), 配置测试可以帮助提升项目质量 可以参考 https://github.com/NervJS/taro-ui-sample 项目, 其中已经包含了完整的测试配置与范例 [!] 没有检查到 Readme (readme/readme.md/readme.markdown), 编写 Readme 可以方便其他人了解项目 ============= WARNING: You are currently running a version of TypeScript which is not officially supported by @typescript-eslint/typescript-estree. You may find that it works just fine, or you may not. SUPPORTED TYPESCRIPT VERSIONS: >=4.3.5 powered by Gitbook该文件修订时间： 2025-05-24 10:46:58 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"chapter1/4.Taro配置.html":{"url":"chapter1/4.Taro配置.html","title":"3.4 Taro 项目配置详解","keywords":"","body":"鸿蒙版taro编译配置 编译配置存放于项目根目录下的 config 目录中，只要确保 config/index.js 或者 config/index.ts 文件存在，可以作为用户自定义编译配置导出即可。你也可以选择拆分成三个文件（具体见默认配置）： index.js 是通用配置 dev.js 是项目预览时的配置 prod.js 是项目打包时的配置 config/index.js import { defineConfig, type UserConfigExport } from '@tarojs/cli' import devConfig from './dev' import prodConfig from './prod' import os from 'os' import path from 'path' // https://taro-docs.jd.com/docs/next/config#defineconfig-辅助函数 export default defineConfig(async (merge, { command, mode }) => { const baseConfig: UserConfigExport = { projectName: 'taro-ohos', date: '2025-5-16', designWidth: 750, deviceRatio: { 640: 2.34 / 2, 750: 1, 375: 2, 828: 1.81 / 2 }, sourceRoot: 'src', outputRoot: 'dist', plugin: ['@tarojs/plugin-platform-harmony-cpp', { harmony: { // 当前仅支持使用 Vite 编译鸿蒙应用 compiler: 'vite', projectPath: path.join(os.homedir(), '../tarooh'), // Taro 项目编译到对应鸿蒙模块名，默认为 entry hapName: 'entry', }, }], defineConstants: { }, copy: { patterns: [ ], options: { } }, framework: 'react', compiler: 'vite', mini: { postcss: { pxtransform: { enable: true, config: { } }, cssModules: { enable: false, // 默认为 false，如需使用 css modules 功能，则设为 true config: { namingPattern: 'module', // 转换模式，取值为 global/module generateScopedName: '[name]__[local]___[hash:base64:5]' } } }, }, // plugins: [], h5: { publicPath: '/', staticDirectory: 'static', miniCssExtractPluginOption: { ignoreOrder: true, filename: 'css/[name].[hash].css', chunkFilename: 'css/[name].[chunkhash].css' }, postcss: { autoprefixer: { enable: true, config: {} }, cssModules: { enable: false, // 默认为 false，如需使用 css modules 功能，则设为 true config: { namingPattern: 'module', // 转换模式，取值为 global/module generateScopedName: '[name]__[local]___[hash:base64:5]' } } }, }, rn: { appName: 'taroDemo', postcss: { cssModules: { enable: false, // 默认为 false，如需使用 css modules 功能，则设为 true } } }, } process.env.BROWSERSLIST_ENV = process.env.NODE_ENV if (process.env.NODE_ENV === 'development') { // 本地开发构建配置（不混淆压缩） return merge({}, baseConfig, devConfig) } // 生产构建配置（默认开启压缩混淆等） return merge({}, baseConfig, prodConfig) }) 完毕， powered by Gitbook该文件修订时间： 2025-05-24 10:46:58 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"chapter1/5.鸿蒙版Taro搭建开发环境.html":{"url":"chapter1/5.鸿蒙版Taro搭建开发环境.html","title":"4.1 鸿蒙版 Taro 开发环境搭建","keywords":"","body":"鸿蒙版Taro 搭建开发环境 一、配置鸿蒙环境 下载安装 DevEco 建议使用最新版本的 IDE，当前为 5.0.5Release 版本。 二、创建鸿蒙项目 打开 DevEco，点击右上角的 Create Project，在 Application 处选择 Empty Ability，点击 Next，进入配置页面，根据需求调整内容，这里使用默认配置： Project name：tarooh Bundle name：com.nutpi.taro Save location：选择需要创建的目录，例如 ~/test/tarooh Module name：entry 注意，当前 Taro 支持的 SDK 版本为 4.1.1。 点击 Finish 完成项目创建。 三、安装 Taro 4.1 npm install -g @tarojs/cli 安装成功后，检查 taro 是否生效： taro --version 预期输出： 👽 Taro v4.1.1 4.1.1 初始化项目 taro init taro-ohos 按照提示输入以下配置： 注意：当前仅支持使用 Vite 编译鸿蒙应用，所以在配置时请注意选择。 ? 请输入项目介绍 taro ohos ? 请选择框架 React ? 是否需要使用 TypeScript？Yes ? 请选择 CSS 预处理器（Sass/Less/Stylus）Sass ? 请选择包管理工具 yarn ? 请选择编译工具 Vite ? 请选择模板源 Gitee（最快） ✔ 拉取远程模板仓库成功！ ? 请选择模板 默认模板 等待项目创建成功，直到输出以下提示： Done in 44.95s. ✔ 安装项目依赖成功 创建项目 taro-ohos 成功！ 请进入项目目录 taro-ohos 开始工作吧！😝 四、安装鸿蒙插件 cd taro-ohos 然后使用 npm 安装： npm i @tarojs/plugin-platform-harmony-cpp 或者使用 pnpm 安装： pnpm i @tarojs/plugin-platform-harmony-cpp 五、修改编译配置 找到 config/index.ts 文件，在 plugin 处添加 @tarojs/plugin-platform-harmony-cpp，并在 rn 下方添加 harmony 配置： import os from 'os' import path from 'path' const config = { // ... plugins: [ ['@tarojs/plugin-platform-harmony-cpp', { }] ], harmony: { // compiler: 'vite', projectPath: path.join(os.homedir(), '/Desktop/test/tarooh'), hapName: 'entry', }, // ... } 注意：将 projectPath 设置为 DevEco 创建的鸿蒙项目目录。 六、编译鸿蒙应用 # 编译鸿蒙应用 taro build --type harmony_cpp # 编译鸿蒙原生组件 taro build native-components --type harmony_cpp 如果需要同时编译鸿蒙应用和原生组件，可以在页面配置中添加 entryOption: false 表示该页面是组件，并通过 componentName 指定组件导出名： export default { navigationBarTitleText: 'Hello World', + componentName: 'MyComponent', + entryOption: false, } Taro 会将编译好的文件输出至鸿蒙项目目录。 七、运行鸿蒙应用 1.配置应用签名 打开 File -> Project Structure...，点击 Signing Configs，点击 Sign In，登录华为账号，点击右下角 Apply，然后点击 OK，完成签名配置。 { \"name\": \"entry\", \"version\": \"1.0.0\", \"description\": \"Please describe the basic information.\", \"main\": \"\", \"author\": \"\", \"license\": \"\", \"dependencies\": { \"@taro-oh/library\": \"file:../static/@taro-oh/library-4.1.1.har\" }, \"devDependencies\": {} } 2.运行应用 在 DevEco 中，点击运行按钮。 八、常见问题解答（FAQ） 1.不存在编译平台 ${platform} 若运行 Taro 时出现 throw new Error('不存在编译平台 ${platform}') 错误，可能是因为 config/index.ts 文件中未添加 @tarojs/plugin-platform-harmony-cpp 插件。 2.EPERM: operation not permitted 遇到权限问题时，可执行以下命令： mkdir -p ~/.npm-global/lib/node_modules npm config set prefix '~/.npm-global' npm install -g @tarojs/cli 九、参考资料 鸿蒙 & OpenHarmony | Taro 文档 Taro 项目仓库 Taro 官方文档 Taro UI 项目仓库 Taro UI 官方文档 plugin-platform-harmony-cpp taro-oh 十、Taro 仓库概览 以下是 Taro 的主要 NPM 包及其功能： 路径 描述 @tarojs/cli CLI 工具 @tarojs/service 插件化内核 @tarojs/taro-loader Webpack loaders @tarojs/helper 工具库，主要供 CLI、编译时使用 @tarojs/runner-utils 工具库，主要供小程序、H5 的编译工具使用 @tarojs/shared 工具库，主要供运行时使用 @tarojs/taro 暴露各端所需要的 Taro 对象 @tarojs/api 和各端相关的 Taro API babel-preset-taro Babel preset eslint-config-taro ESLint 规则 postcss-pxtransform PostCSS 插件，转换 px 为各端的自适应尺寸单位 postcss-html-transform PostCSS 插件，用于 HTML、小程序标签的类名相互转换 坚果派社区 坚果派社区由坚果、小波、狼哥等人创建，团队成员包括数位华为 HDE 及 1000+ HarmonyOS 开发者，以及三十余位万粉博主/UP 主，专注于分享 HarmonyOS/OpenHarmony、仓颉、ArkUI-X、元服务、AI、BlueOS 操作系统等技术。团队成员主要分布在北京、上海、南京、深圳、广州、苏州、长沙、宁夏等地，已为华为、vivo、腾讯、亚马逊等提供开发咨询服务 100+ 次，累计粉丝 100w+，孵化开发者 10w+，覆盖高校 20+、企业 10+。自研应用 40 款，三方库 80 个，鸿蒙原生应用课程 500+，持续助力鸿蒙仓颉等生态繁荣发展。欢迎大家加入。 powered by Gitbook该文件修订时间： 2025-06-03 17:52:02 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"chapter1/6.鸿蒙版taro编译配置.html":{"url":"chapter1/6.鸿蒙版taro编译配置.html","title":"4.2 鸿蒙版 Taro 编译配置","keywords":"","body":"鸿蒙版taro编译配置 编译配置存放于项目根目录下的 config 目录中，只要确保 config/index.js 或者 config/index.ts 文件存在，可以作为用户自定义编译配置导出即可。你也可以选择拆分成三个文件（具体见默认配置）： index.js 是通用配置 dev.js 是项目预览时的配置 prod.js 是项目打包时的配置 config/index.js import { defineConfig, type UserConfigExport } from '@tarojs/cli' import devConfig from './dev' import prodConfig from './prod' import os from 'os' import path from 'path' // https://taro-docs.jd.com/docs/next/config#defineconfig-辅助函数 export default defineConfig(async (merge, { command, mode }) => { const baseConfig: UserConfigExport = { projectName: 'taro-ohos', date: '2025-5-16', designWidth: 750, deviceRatio: { 640: 2.34 / 2, 750: 1, 375: 2, 828: 1.81 / 2 }, sourceRoot: 'src', outputRoot: 'dist', plugin: ['@tarojs/plugin-platform-harmony-cpp', { harmony: { // 当前仅支持使用 Vite 编译鸿蒙应用 compiler: 'vite', projectPath: path.join(os.homedir(), '../tarooh'), // Taro 项目编译到对应鸿蒙模块名，默认为 entry hapName: 'entry', }, }], defineConstants: { }, copy: { patterns: [ ], options: { } }, framework: 'react', compiler: 'vite', mini: { postcss: { pxtransform: { enable: true, config: { } }, cssModules: { enable: false, // 默认为 false，如需使用 css modules 功能，则设为 true config: { namingPattern: 'module', // 转换模式，取值为 global/module generateScopedName: '[name]__[local]___[hash:base64:5]' } } }, }, // plugins: [], h5: { publicPath: '/', staticDirectory: 'static', miniCssExtractPluginOption: { ignoreOrder: true, filename: 'css/[name].[hash].css', chunkFilename: 'css/[name].[chunkhash].css' }, postcss: { autoprefixer: { enable: true, config: {} }, cssModules: { enable: false, // 默认为 false，如需使用 css modules 功能，则设为 true config: { namingPattern: 'module', // 转换模式，取值为 global/module generateScopedName: '[name]__[local]___[hash:base64:5]' } } }, }, rn: { appName: 'taroDemo', postcss: { cssModules: { enable: false, // 默认为 false，如需使用 css modules 功能，则设为 true } } }, } process.env.BROWSERSLIST_ENV = process.env.NODE_ENV if (process.env.NODE_ENV === 'development') { // 本地开发构建配置（不混淆压缩） return merge({}, baseConfig, devConfig) } // 生产构建配置（默认开启压缩混淆等） return merge({}, baseConfig, prodConfig) }) 完毕， powered by Gitbook该文件修订时间： 2025-05-19 19:40:13 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"chapter5/1.组件开发与适配.html":{"url":"chapter5/1.组件开发与适配.html","title":"5.1 组件开发与适配","keywords":"","body":"5.1 组件开发与适配 概述 在 Taro For Harmony 开发中，组件开发与适配是构建高质量应用的关键环节。本章将详细介绍如何开发适配鸿蒙平台的 Taro 组件。 5.1.1 组件开发基础 函数式组件 ```jsx import { View, Text } from '@tarojs/components' import { useState } from 'react' const CustomButton = ({ title, onPress, disabled = false }) => { const [pressed, setPressed] = useState(false) const handlePress = () => { if (!disabled && onPress) { setPressed(true) onPress() setTimeout(() => setPressed(false), 150) } } return ( {title} ) } export default CustomButton powered by Gitbook该文件修订时间： 2025-06-30 08:32:10 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"}}